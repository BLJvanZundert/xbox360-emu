InstrEntry Instructions[] = {
   { },
   { "add",     { { xo1, 31 }, { xo3,  266 }             }, { rD }, { rA, rB }, { oe, rc },     "Add" },
   { "addc",    { { xo1, 31 }, { xo3,   10 }             }, { rD }, { rA, rB }, { oe, rc },     "Add Carrying" },
   { "adde",    { { xo1, 31 }, { xo3,  138 }             }, { rD }, { rA, rB }, { oe, rc },     "Add Extended" },
   { "addi",    { { xo1, 14 }                            }, { rD }, { rA, simm }, { },          "Add Immediate" },
   { "addic",   { { xo1, 12 }                            }, { rD }, { rA, simm }, { },          "Add Immediate Carrying" },
   { "addico",  { { xo1, 13 }                            }, { rD }, { rA, simm }, { },          "Add Immediate Carrying and Record" },
   { "addis",   { { xo1, 15 }                            }, { rD }, { rA, simm }, { },          "Add Immediate Shifted" },
   { "addme",   { { xo1, 31 }, { xo3,  234 }             }, { rD }, { rA }, { oe, rc },         "Add to Minus One Extended" },
   { "addze",   { { xo1, 31 }, { xo3,  202 }             }, { rD }, { rA }, { oe, rc },         "Add to Zero Extended" },
   { "and",     { { xo1, 31 }, { xo2,   28 }             }, { rA }, { rS, rB }, { rc },         "AND" },
   { "andc",    { { xo1, 31 }, { xo2,   60 }             }, { rA }, { rS, rB }, { rc },         "AND with Complement" },
   { "andio",   { { xo1, 28 }                            }, { rA }, { rS, uimm }, { },          "AND Immediate" },
   { "andiso",  { { xo1, 29 }                            }, { rA }, { rS, uimm }, { },          "AND Immediate Shifted" },
   { "b",       { { xo1, 18 }                            }, { }, { li }, { aa, lk },            "Branch" },
   { "bc",      { { xo1, 16 }                            }, { }, { bo, bi, bd }, { aa, lk },    "Branch Conditional" },
   { "bcctr",   { { xo1, 19 }, { xo2,  528 }             }, { }, { bo, bi, bh }, { lk },        "Branch Conditional to Count Register" },
   { "bclr",    { { xo1, 19 }, { xo2,   16 }             }, { }, { bo, bi, bh }, { lk },        "Branch Conditional to Link Register" },
   { "cmp",     { { xo1, 31 }, { xo2,    0 }             }, { crfD }, { l, rA, rB }, { },       "Compare" },
   { "cmpi",    { { xo1, 11 }                            }, { }, { crfD, l, rA, simm }, { },    "Compare Immediate" },
   { "cmpl",    { { xo1, 31 }, { xo2,   32 }             }, { crfD }, { l, rA, rB }, { },       "Compare Logical" },
   { "cmpli",   { { xo1, 10 }                            }, { }, { crfD, l, rA, uimm }, { },    "Compare Logical Immediate" },
   { "cntlzd",  { { xo1, 31 }, { xo2,   58 }             }, { rA }, { rS }, { },                "Count Leading Zeros Doubleword" },
   { "cntlzw",  { { xo1, 31 }, { xo2,   26 }             }, { rA }, { rS }, { },                "Count Leading Zeros Word" },
   { "crand",   { { xo1, 19 }, { xo2,  257 }             }, { crbD }, { crbA, crbB }, { },      "Condition Register AND" },
   { "crandc",  { { xo1, 19 }, { xo2,  129 }             }, { crbD }, { crbA, crbB }, { },      "Condition Register AND with Complement" },
   { "creqv",   { { xo1, 19 }, { xo2,  289 }             }, { crbD }, { crbA, crbB }, { },      "Condition Register Equivalent" },
   { "crnand",  { { xo1, 19 }, { xo2,  225 }             }, { crbD }, { crbA, crbB }, { },      "Condition Register NAND" },
   { "crnor",   { { xo1, 19 }, { xo2,   33 }             }, { crbD }, { crbA, crbB }, { },      "Condition Register NOR" },
   { "cror",    { { xo1, 19 }, { xo2,  449 }             }, { crbD }, { crbA, crbB }, { },      "Condition Register OR" },
   { "crorc",   { { xo1, 19 }, { xo2,  417 }             }, { crbD }, { crbA, crbB }, { },      "Condition Register OR with Complement" },
   { "crxor",   { { xo1, 19 }, { xo2,  193 }             }, { crbD }, { crbA, crbB }, { },      "Condition Register XOR" },
   { "dcbf",    { { xo1, 31 }, { xo2,   86 }             }, { }, { rA, rB }, { },               "Data Cache Block Flush" },
   { "dcbst",   { { xo1, 31 }, { xo2,   54 }             }, { }, { rA, rB }, { },               "Data Cache Block Store" },
   { "dcbt",    { { xo1, 31 }, { xo2,  278 }             }, { }, { rA, rB, th }, { },           "Data Cache Block Touch" },
   { "dcbtst",  { { xo1, 31 }, { xo2,  246 }             }, { }, { rA, rB }, { },               "Data Cache Block Touch for Store" },
   { "dcbz",    { { xo1, 31 }, { xo2, 1014 }             }, { }, { rA, rB }, { },               "Data Cache Clear to Zero" },
   { "divd",    { { xo1, 31 }, { xo3,  489 }             }, { rD }, { rA, rB }, { oe, rc },     "Divide Doubleword" },
   { "divdu",   { { xo1, 31 }, { xo3,  457 }             }, { rD }, { rA, rB }, { oe, rc },     "Divide Doubleword Unsigned" },
   { "divw",    { { xo1, 31 }, { xo3,  491 }             }, { rD }, { rA, rB }, { oe, rc },     "Divide Word" },
   { "divwu",   { { xo1, 31 }, { xo3,  459 }             }, { rD }, { rA, rB }, { oe, rc },     "Divide Word Unsigned" },
   { "eciwx",   { { xo1, 31 }, { xo2,  310 }             }, { rD }, { rA, rB }, { },            "External Control In Word Indexed" },
   { "ecowx",   { { xo1, 31 }, { xo2,  438 }             }, { }, { rS, rA, rB }, { },           "External Control Out Word Indexed" },
   { "eieio",   { { xo1, 31 }, { xo2,  854 }             }, { }, { }, { },                      "Enforce In-Order Execution of I/O" },
   { "eqv",     { { xo1, 31 }, { xo3,  284 }             }, { rA }, { rS, rB }, { rc },         "Equivalent" },
   { "extsb",   { { xo1, 31 }, { xo2,  954 }             }, { rA }, { rS }, { rc },             "Extend Sign Byte" },
   { "extsh",   { { xo1, 31 }, { xo2,  922 }             }, { rA }, { rS }, { rc },             "Extend Sign Halfword" },
   { "extsw",   { { xo1, 31 }, { xo2,  986 }             }, { rA }, { rS }, { rc },             "Extend Sign Word" },
   { "fabs",    { { xo1, 63 }, { xo2,  264 }             }, { frD }, { frA }, { rc },           "Floating Absolute Value" },
   { "fadd",    { { xo1, 63 }, { xo2,   21 }             }, { frD }, { frA, frB }, { rc },      "Floating Add (Double-Precision)" },
   { "fadds",   { { xo1, 59 }, { xo2,   21 }             }, { frD }, { frA, frB }, { rc },      "Floating Add Single" },
   { "fcfid",   { { xo1, 63 }, { xo2,  846 }             }, { frD }, { frB }, { rc },           "Floating Convert from Integer Doubleword" },
   { "fcmpo",   { { xo1, 63 }, { xo2,   32 }             }, { crfD }, { frA, frB }, { rc },     "Floating Compare Ordered" },
   { "fcmpu",   { { xo1, 63 }, { xo2,    0 }             }, { crfD }, { frA, frB }, { rc },     "Floating Compare Unordered" },
   { "fctid",   { { xo1, 63 }, { xo2,  814 }             }, { frD }, { frB }, { rc },           "Floating Convert to Integer Doubleword" },
   { "fctidz",  { { xo1, 63 }, { xo2,  815 }             }, { frD }, { frB }, { rc },           "Floating Convert to Integer Doubleword with round toward Zero" },
   { "fctiw",   { { xo1, 63 }, { xo2,   14 }             }, { frD }, { frB }, { rc },           "Floating Convert to Integer Word" },
   { "fctiwz",  { { xo1, 63 }, { xo2,   15 }             }, { frD }, { frB }, { rc },           "Floating Convert to Integer Word with round toward Zero" },
   { "fdiv",    { { xo1, 63 }, { xo2,   18 }             }, { frD }, { frA, frB }, { rc },      "Floating Divide (Double-Precision)" },
   { "fdivs",   { { xo1, 59 }, { xo2,   18 }             }, { frD }, { frA, frB }, { rc },      "Floating Divide Single" },
   { "fmadd",   { { xo1, 63 }, { xo4,   29 }             }, { frD }, { frA, frC, frB }, { rc }, "Floating Multiply-Add (Double-Precision)" },
   { "fmadds",  { { xo1, 59 }, { xo4,   29 }             }, { frD }, { frA, frC, frB }, { rc }, "Floating Multiply-Add Single" },
   { "fmr",     { { xo1, 63 }, { xo2,   72 }             }, { frD }, { frB }, { rc },           "Floating Move Register (Double-Precision)" },
   { "fmsub",   { { xo1, 63 }, { xo4,   28 }             }, { frD }, { frA, frC, frB }, { rc }, "Floating Multiply-Subtract (Double-Precision)" },
   { "fmsubs",  { { xo1, 59 }, { xo4,   28 }             }, { frD }, { frA, frC, frB }, { rc }, "Floating Multiply-Subtract Single" },
   { "fmul",    { { xo1, 63 }, { xo4,   25 }             }, { frD }, { frA, frC }, { rc },      "Floating Multiply (Double-Precision)" },
   { "fmuls",   { { xo1, 59 }, { xo4,   25 }             }, { frD }, { frA, frC }, { rc },      "Floating Multiply Single" },
   { "fnabs",   { { xo1, 63 }, { xo2,  136 }             }, { frD }, { frB }, { rc },           "Floating Negative Absolute Value" },
   { "fneg",    { { xo1, 63 }, { xo2,   40 }             }, { frD }, { frB }, { rc },           "Floating Negate" },
   { "fnmadd",  { { xo1, 63 }, { xo4,   31 }             }, { frD }, { frA, frC, frB }, { rc }, "Floating Negative Multiply-Add (Double-Precision)" },
   { "fnmadds", { { xo1, 59 }, { xo4,   31 }             }, { frD }, { frA, frC, frB }, { rc }, "Floating Negative Multiply-Add Single" },
   { "fnmsub",  { { xo1, 63 }, { xo4,   30 }             }, { frD }, { frA, frC, frB }, { rc }, "Floating Negative Multiply-Subtract (Double-Precision)" },
   { "fnmsubs", { { xo1, 59 }, { xo4,   30 }             }, { frD }, { frA, frC, frB }, { rc }, "Floating Negative Multiply-Subtract Single" },
   { "fres",    { { xo1, 59 }, { xo4,   24 }             }, { frD }, { frB }, { rc },           "Floating Reciprocal Estimate Single" },
   { "frsp",    { { xo1, 63 }, { xo2,   12 }             }, { frD }, { frB }, { rc },           "Floating Round to Single" },
   { "frsqrte", { { xo1, 63 }, { xo4,   26 }             }, { frD }, { frB }, { rc },           "Floating Reciprocal Square Root Estimate" },
   { "fsel",    { { xo1, 63 }, { xo4,   23 }             }, { frD }, { frA, frC, frB }, { rc }, "Floating Select" },
   { "fsqrt",   { { xo1, 63 }, { xo2,   22 }             }, { frD }, { frB }, { rc },           "Floating Square Root (Double-Precision)" },
   { "fsqrts",  { { xo1, 59 }, { xo2,   22 }             }, { frD }, { frB }, { rc },           "Floating Square Root Single" },
   { "fsub",    { { xo1, 63 }, { xo2,   20 }             }, { frD }, { frA, frB }, { rc },      "Floating Subtract (Double-Precision)" },
   { "fsubs",   { { xo1, 59 }, { xo2,   20 }             }, { frD }, { frA, frB }, { rc },      "Floating Subtract Single" },
   { "icbi",    { { xo1, 31 }, { xo2,  982 }             }, { }, { rA, rB }, { },               "Instruction Cache Block Invalidate" },
   { "isync",   { { xo1, 19 }, { xo2,  150 }             }, { }, { rA, rB }, { },               "Instruction Synchronize" },
   { "krncall", { { xo1,  5 }                            }, { }, { uimm }, { },                 "Kernel Function Call" },
   { "lbz",     { { xo1, 34 }                            }, { rD }, { d, rA }, { },             "Load Byte and Zero" },
   { "lbzu",    { { xo1, 35 }                            }, { rD }, { d, rA }, { },             "Load Byte and Zero with Update" },
   { "lbzux",   { { xo1, 31 }, { xo2,  119 }             }, { rD }, { rA, rB }, { },            "Load Byte and Zero with Update Indexed" },
   { "lbzx",    { { xo1, 31 }, { xo2,   87 }             }, { rD }, { rA, rB }, { },            "Load Byte and Zero Indexed" },
   { "ld",      { { xo1, 58 }, { xo5,    0 }             }, { rD }, { ds, rA }, { },            "Load Doubleword" },
   { "ldarx",   { { xo1, 31 }, { xo2,   84 }             }, { rD }, { rA, rB }, { },            "Load Doubleword and Reserve Indexed" },
   { "ldu",     { { xo1, 58 }, { xo5,    1 }             }, { rD }, { ds, rA }, { },            "Load Doubleword with Update" },
   { "ldux",    { { xo1, 31 }, { xo2,   53 }             }, { rD }, { rA, rB }, { },            "Load Doubleword with Update Indexed" },
   { "ldx",     { { xo1, 31 }, { xo2,   21 }             }, { rD }, { rA, rB }, { },            "Load Doubleword Indexed" },
   { "lfd",     { { xo1, 50 }                            }, { frD }, { d, rA }, { },            "Load Floating-Point Double" },
   { "lfdu",    { { xo1, 51 }                            }, { frD }, { d, rA }, { },            "Load Floating-Point Double with Update" },
   { "lfdux",   { { xo1, 31 }, { xo2,  631 }             }, { frD }, { rA, rB }, { },           "Load Floating-Point Double with Update Indexed" },
   { "lfdx",    { { xo1, 31 }, { xo2,  599 }             }, { frD }, { rA, rB }, { },           "Load Floating-Point Double Indexed" },
   { "lfs",     { { xo1, 48 }                            }, { frD }, { d, rA }, { },            "Load Floating-Point Single" },
   { "lfsu",    { { xo1, 49 }                            }, { frD }, { d, rA }, { },            "Load Floating-Point Single with Update" },
   { "lfsux",   { { xo1, 31 }, { xo2,  567 }             }, { frD }, { rA, rB }, { },           "Load Floating-Point Single with Update Indexed" },
   { "lfsx",    { { xo1, 31 }, { xo2,  535 }             }, { frD }, { rA, rB }, { },           "Load Floating-Point Single Indexed" },
   { "lha",     { { xo1, 42 }                            }, { rD }, { d, rA }, { },             "Load Halfword Algebraic" },
   { "lhau",    { { xo1, 43 }                            }, { rD }, { d, rA }, { },             "Load Halfword Algebraic with Update" },
   { "lhaux",   { { xo1, 31 }, { xo2,  375 }             }, { rD }, { rA, rB }, { },            "Load Halfword Algebraic with Update Indexed" },
   { "lhax",    { { xo1, 31 }, { xo2,  343 }             }, { rD }, { rA, rB }, { },            "Load Halfword Algebraic Indexed" },
   { "lhbrx",   { { xo1, 31 }, { xo2,  790 }             }, { rD }, { rA, rB }, { },            "Load Halfword Byte-Reverse Indexed" },
   { "lhz",     { { xo1, 40 }                            }, { rD }, { d, rA }, { },             "Load Halfword and Zero" },
   { "lhzu",    { { xo1, 41 }                            }, { rD }, { d, rA }, { },             "Load Halfword and Zero with Update" },
   { "lhzux",   { { xo1, 31 }, { xo2,  311 }             }, { rD }, { rA, rB }, { },            "Load Halfword and Zero with Update Indexed" },
   { "lhzx",    { { xo1, 31 }, { xo2,  279 }             }, { rD }, { rA, rB }, { },            "Load Halfword and Zero Indexed" },
   { "lmw",     { { xo1, 46 }                            }, { rD }, { d, rA }, { },             "Load Multiple Word" },
   { "lswi",    { { xo1, 31 }, { xo2,  597 }             }, { rD }, { rA, nb }, { },            "Load String Word Immediate" },
   { "lswx",    { { xo1, 31 }, { xo2,  533 }             }, { rD }, { rA, rB }, { },            "Load String Word Indexed" },
   { "lwa",     { { xo1, 58 }, { xo5,    2 }             }, { rD }, { ds, rA }, { },            "Load Word Algebraic" },
   { "lwarx",   { { xo1, 31 }, { xo2,   20 }             }, { rD }, { rA, rB }, { },            "Load Word and Reserve Indexed" },
   { "lwaux",   { { xo1, 31 }, { xo2,  373 }             }, { rD }, { rA, rB }, { },            "Load Word Algebraic with Update Indexed" },
   { "lwax",    { { xo1, 31 }, { xo2,  341 }             }, { rD }, { rA, rB }, { },            "Load Word Algebraic Indexed" },
   { "lwbrx",   { { xo1, 31 }, { xo2,  534 }             }, { rD }, { rA, rB }, { },            "Load Word Byte-Reverse Indexed" },
   { "lwz",     { { xo1, 32 }                            }, { rD }, { d, rA }, { },             "Load Word and Zero" },
   { "lwzu",    { { xo1, 33 }                            }, { rD }, { d, rA }, { },             "Load Word and Zero with Update" },
   { "lwzux",   { { xo1, 31 }, { xo2,   55 }             }, { rD }, { rA, rB }, { },            "Load Word and Zero with Update Indexed" },
   { "lwzx",    { { xo1, 31 }, { xo2,   23 }             }, { rD }, { rA, rB }, { },            "Load Word and Zero Indexed" },
   { "mcrf",    { { xo1, 19 }, { xo2,    0 }             }, { crfD }, { crfS }, { },            "Move Condition Register Field" },
   { "mcrfs",   { { xo1, 63 }, { xo2,   64 }             }, { crfD }, { crfS }, { },            "Move to Condition Register from FPSCR" },
   { "mfcr",    { { xo1, 31 }, { xo2,   19 }, { xo6, 0 } }, { rD }, { }, { },                   "Move from Condition Register" },
   { "mffs",    { { xo1, 63 }, { xo2,  583 }             }, { frD }, { }, { rc },               "Move from FPSCR" },
   { "mfmsr",   { { xo1, 31 }, { xo2,   83 }             }, { rD }, { }, { },                   "Move from Machine State Register" },
   { "mfocrf",  { { xo1, 31 }, { xo2,   19 }, { xo6, 1 } }, { rD }, { crm }, { },               "Move from One Condition Register Field" },
   { "mfspr",   { { xo1, 31 }, { xo2,  339 }             }, { rD }, { spr }, { },               "Move from Special-Purpose Register" },
   { "mfsr",    { { xo1, 31 }, { xo2,  595 }             }, { rD }, { sr }, { },                "Move from Segment Register" },
   { "mfsrin",  { { xo1, 31 }, { xo2,  659 }             }, { rD }, { rB }, { },                "Move from Segment Register Indirect" },
   { "mftb",    { { xo1, 31 }, { xo2,  371 }             }, { rD }, { tbr }, { },               "Move from Time Base" },
   { "mtcrf",   { { xo1, 31 }, { xo2,  144 }, { xo6, 0 } }, { }, { crm, rS }, { },              "Move to Condition Register Fields" },
   { "mtfsb0",  { { xo1, 63 }, { xo2,   70 }             }, { crbD }, { }, { rc },              "Move to FPSCR Bit 0" },
   { "mtfsb1",  { { xo1, 63 }, { xo2,   38 }             }, { crbD }, { }, { rc },              "Move to FPSCR Bit 1" },
   { "mtfsf",   { { xo1, 63 }, { xo2,  711 }             }, { }, { fm, frB }, { rc },           "Move to FPSCR Fields" },
   { "mtfsfi",  { { xo1, 63 }, { xo2,  134 }             }, { }, { crfD, uimm }, { rc },        "Move to FPSCR Field Immediate" },
   { "mtmsr",   { { xo1, 31 }, { xo2,  146 }             }, { }, { rS, l15 }, { },              "Move to Machine State Register" },
   { "mtmsrd",  { { xo1, 31 }, { xo2,  178 }             }, { }, { rS, l15 }, { },              "Move to Machine State Register Doubleword" },
   { "mtocrf",  { { xo1, 31 }, { xo2,  144 }, { xo6, 1 } }, { }, { crm, rS }, { },              "Move to One Condition Register Field" },
   { "mtspr",   { { xo1, 31 }, { xo2,  467 }             }, { }, { spr, rS }, { },              "Move to Special-Purpose Register" },
   { "mtsr",    { { xo1, 31 }, { xo2,  210 }             }, { }, { sr, rS }, { },               "Move to Segment Register" },
   { "mtsrin",  { { xo1, 31 }, { xo2,  242 }             }, { }, { rS, rB }, { },               "Move to Segment Register Indirect" },
   { "mulhd",   { { xo1, 31 }, { xo3,   73 }             }, { rD }, { rA, rB }, { rc },         "Multiply High Doubleword" },
   { "mulhdu",  { { xo1, 31 }, { xo3,    9 }             }, { rD }, { rA, rB }, { rc },         "Multiply High Doubleword Unsigned" },
   { "mulhw",   { { xo1, 31 }, { xo3,   75 }             }, { rD }, { rA, rB }, { rc },         "Multiply High Word" },
   { "mulhwu",  { { xo1, 31 }, { xo3,   11 }             }, { rD }, { rA, rB }, { rc },         "Multiply High Word Unsigned" },
   { "mulld",   { { xo1, 31 }, { xo3,  233 }             }, { rD }, { rA, rB }, { oe, rc },     "Multiply Low Doubleword" },
   { "mulli",   { { xo1,  7 }                            }, { rD }, { rA, simm }, { },          "Multiply Low Immediate" },
   { "mullw",   { { xo1, 31 }, { xo3,  235 }             }, { rD }, { rA, rB }, { oe, rc },     "Multiply Low Word" },
   { "nand",    { { xo1, 31 }, { xo2,  476 }             }, { rA }, { rS, rB }, { rc },         "NAND" },
   { "neg",     { { xo1, 31 }, { xo3,   31 }             }, { rD }, { rA }, { oe, rc },         "Negate" },
   { "nor",     { { xo1, 31 }, { xo2,  124 }             }, { rA }, { rS, rB }, { rc },         "NOR" },
   { "or",      { { xo1, 31 }, { xo2,  444 }             }, { rA }, { rS, rB }, { rc },         "OR" },
   { "orc",     { { xo1, 31 }, { xo2,  412 }             }, { rA }, { rS, rB }, { rc },         "OR with Complement" },
   { "ori",     { { xo1, 24 }                            }, { rA }, { rS, uimm }, { },          "OR Immediate" },
   { "oris",    { { xo1, 25 }                            }, { rA }, { rS, uimm }, { },          "OR Immediate Shifted" },
   { "rfid",    { { xo1, 19 }, { xo2,   18 }             }, { }, { }, { },                      "Return from Interrupt Doubleword" },
   { "rldcl",   { { xo1, 30 }, { xo7,    8 }             }, { rA }, { rS, rB, mb }, { rc },     "Rotate Left Doubleword then Clear Left" },
   { "rldcr",   { { xo1, 30 }, { xo7,    9 }             }, { rA }, { rS, rB, mb }, { rc },     "Rotate Left Doubleword then Clear Right" },
   { "rldic",   { { xo1, 30 }, { xo8,    2 }             }, { rA }, { rS, sh, mb }, { rc },     "Rotate Left Doubleword Immediate then Clear" },
   { "rldicl",  { { xo1, 30 }, { xo8,    0 }             }, { rA }, { rS, sh, mb }, { rc },     "Rotate Left Doubleword Immediate then Clear Left" },
   { "rldicr",  { { xo1, 30 }, { xo8,    1 }             }, { rA }, { rS, sh, mb }, { rc },     "Rotate Left Doubleword Immediate then Clear Right" },
   { "rldimi",  { { xo1, 30 }, { xo8,    3 }             }, { rA }, { rS, sh, mb }, { rc },     "Rotate Left Doubleword Immediate then Mask Insert" },
   { "rlwimi",  { { xo1, 20 }                            }, { rA }, { rS, sh, mb, me }, { rc }, "Rotate Left Word Immediate then Mask Insert" },
   { "rlwinm",  { { xo1, 21 }                            }, { rA }, { rS, sh, mb, me }, { rc }, "Rotate Left Word Immediate then AND with Mask" },
   { "rlwnm",   { { xo1, 23 }                            }, { rA }, { rS, rB, mb, me }, { rc }, "Rotate Left Word then AND with Mask" },
   { "sc",      { { xo1, 17 }                            }, { }, { }, { },                      "System Call" },
   { "slbia",   { { xo1, 31 }, { xo2,  498 }             }, { }, { }, { },                      "SLB Invalidate All" },
   { "slbie",   { { xo1, 31 }, { xo2,  434 }             }, { }, { rB }, { },                   "SLB Invalidate Entry" },
   { "slbmfee", { { xo1, 31 }, { xo2,  915 }             }, { rD }, { rB }, { },                "SLB Move From Entry ESID" },
   { "slbmfev", { { xo1, 31 }, { xo2,  851 }             }, { rD }, { rB }, { },                "SLB Move From Entry VSID" },
   { "slbmte",  { { xo1, 31 }, { xo2,  402 }             }, { }, { rS, rB }, { },               "SLB Move To Entry" },
   { "sld",     { { xo1, 31 }, { xo2,   27 }             }, { rA }, { rS, rB }, { rc },         "Shift Left Doubleword" },
   { "slw",     { { xo1, 31 }, { xo2,   24 }             }, { rA }, { rS, rB }, { rc },         "Shift Left Word" },
   { "srad",    { { xo1, 31 }, { xo2,  794 }             }, { rA }, { rS, rB }, { rc },         "Shift Right Algebraic Doubleword" },
   { "sradi",   { { xo1, 31 }, { xo2,  827 }             }, { rA }, { rS, sh }, { rc },         "Shift Right Algebraic Doubleword Immediate" },
   { "sraw",    { { xo1, 31 }, { xo2,  792 }             }, { rA }, { rS, rB }, { rc },         "Shift Right Algebraic Word" },
   { "srawi",   { { xo1, 31 }, { xo2,  824 }             }, { rA }, { rS, sh }, { rc },         "Shift Right Algebraic Word Immediate" },
   { "srd",     { { xo1, 31 }, { xo2,  539 }             }, { rA }, { rS, rB }, { rc },         "Shift Right Doubleword" },
   { "srw",     { { xo1, 31 }, { xo2,  536 }             }, { rA }, { rS, rB }, { rc },         "Shift Right Word" },
   { "stb",     { { xo1, 38 }                            }, { }, { rS, d, rA }, { },            "Store Byte" },
   { "stbu",    { { xo1, 39 }                            }, { }, { rS, d, rA }, { },            "Store Byte with Update" },
   { "stbux",   { { xo1, 31 }, { xo3,  247 }             }, { }, { rS, rA, rB }, { },           "Store Byte with Update Indexed" },
   { "stbx",    { { xo1, 31 }, { xo3,  215 }             }, { }, { rS, rA, rB }, { },           "Store Byte Indexed" },
   { "std",     { { xo1, 62 }, { xo5,    0 }             }, { }, { rS, ds, rA }, { },           "Store Doubleword" },
   { "stdcx",   { { xo1, 31 }, { xo2,  214 }             }, { }, { rS, rA, rB }, { rc },        "Store Doubleword Conditional Indexed" },
   { "stdu",    { { xo1, 62 }, { xo5,    1 }             }, { }, { rS, ds, rA }, { },           "Store Doubleword with Update" },
   { "stdux",   { { xo1, 31 }, { xo2,  181 }             }, { }, { rS, rA, rB }, { },           "Store Doubleword with Update Indexed" },
   { "stdx",    { { xo1, 31 }, { xo2,  149 }             }, { }, { rS, rA, rB }, { },           "Store Doubleword Indexed" },
   { "stfd",    { { xo1, 54 }                            }, { }, { frS, d, rA }, { },           "Store Floating-Point Double" },
   { "stfdu",   { { xo1, 55 }                            }, { }, { frS, d, rA }, { },           "Store Floating-Point Double with Update" },
   { "stfdux",  { { xo1, 31 }, { xo2,  759 }             }, { }, { frS, rA, rB }, { },          "Store Floating-Point Double with Update Indexed" },
   { "stfdx",   { { xo1, 31 }, { xo2,  727 }             }, { }, { frS, rA, rB }, { },          "Store Floating-Point Double Indexed" },
   { "stfiwx",  { { xo1, 31 }, { xo2,  983 }             }, { }, { frS, rA, rB }, { },          "Store Floating-Point as Integer Word Indexed" },
   { "stfs",    { { xo1, 52 }                            }, { }, { frS, d, rA }, { },           "Store Floating-Point Single" },
   { "stfsu",   { { xo1, 53 }                            }, { }, { frS, d, rA }, { },           "Store Floating-Point Single with Update" },
   { "stfsux",  { { xo1, 31 }, { xo2,  795 }             }, { }, { frS, rA, rB }, { },          "Store Floating-Point Single with Update Indexed" },
   { "stfsx",   { { xo1, 31 }, { xo2,  663 }             }, { }, { frS, rA, rB }, { },          "Store Floating-Point Single Indexed" },
   { "sth",     { { xo1, 44 }                            }, { }, { rS, d, rA }, { },            "Store Halfword" },
   { "sthbrx",  { { xo1, 31 }, { xo2,  918 }             }, { }, { rS, rA, rB }, { },           "Store Halfword Byte-Reverse Indexed" },
   { "sthu",    { { xo1, 45 }                            }, { }, { rS, d, rA }, { },            "Store Halfword with Update" },
   { "sthux",   { { xo1, 31 }, { xo2,  439 }             }, { }, { rS, rA, rB }, { },           "Store Halfword with Update Indexed" },
   { "sthx",    { { xo1, 31 }, { xo2,  407 }             }, { }, { rS, rA, rB }, { },           "Store Halfword Indexed" },
   { "stmw",    { { xo1, 47 }                            }, { }, { rS, d, rA }, { },            "Store Multiple Word" },
   { "stswi",   { { xo1, 31 }, { xo2,  725 }             }, { }, { rS, rA, nb }, { },           "Store String Word Immediate" },
   { "stswx",   { { xo1, 31 }, { xo2,  661 }             }, { }, { rS, rA, rB }, { },           "Store String Word Indexed" },
   { "stw",     { { xo1, 36 }                            }, { }, { rS, d, rA }, { },            "Store Word" },
   { "stwbrx",  { { xo1, 31 }, { xo2,  662 }             }, { }, { rS, rA, rB }, { },           "Store Word Byte-Reverse Indexed" },
   { "stwcx",   { { xo1, 31 }, { xo2,  150 }             }, { }, { rS, rA, rB }, { rc },        "Store Word Conditional Indexed" },
   { "stwu",    { { xo1, 37 }                            }, { }, { rS, d, rA }, { },            "Store Word with Update" },
   { "stwux",   { { xo1, 31 }, { xo2,  183 }             }, { }, { rS, rA, rB }, { },           "Store Word with Update Indexed" },
   { "stwx",    { { xo1, 31 }, { xo2,  151 }             }, { }, { rS, rA, rB }, { },           "Store Word Indexed" },
   { "subf",    { { xo1, 31 }, { xo3,   40 }             }, { rD }, { rA, rB }, { oe, rc },     "Subtract From" },
   { "subfc",   { { xo1, 31 }, { xo3,    8 }             }, { rD }, { rA, rB }, { oe, rc },     "Subtract From Carrying" },
   { "subfe",   { { xo1, 31 }, { xo3,  136 }             }, { rD }, { rA, rB }, { oe, rc },     "Subtract From Extended" },
   { "subfic",  { { xo1,  8 }                            }, { rD }, { rA, simm }, { },          "Subtract From Immediate Carrying" },
   { "subfme",  { { xo1, 31 }, { xo3,  232 }             }, { rD }, { rA }, { oe, rc },         "Subtract From Minus One Extended" },
   { "subfze",  { { xo1, 31 }, { xo3,  200 }             }, { rD }, { rA }, { oe, rc },         "Subtract From Zero Extended" },
   { "sync",    { { xo1, 31 }, { xo2,  598 }             }, { }, { syncl }, { },                "Synchronize" },
   { "td",      { { xo1, 31 }, { xo2,   31 }             }, { }, { to, rA, rB }, { },           "Trap Doubleword" },
   { "tdi",     { { xo1,  2 }                            }, { }, { to, rA, simm }, { },         "Trap Doubleword Immediate" },
   { "tlbia",   { { xo1, 31 }, { xo2,  370 }             }, { }, { }, { },                      "Translation Lookaside Buffer Invalidate All" },
   { "tlbie",   { { xo1, 31 }, { xo2,  306 }             }, { }, { rB, tlbl }, { },             "Translation Lookaside Buffer Invalidate Entry" },
   { "tlbiel",  { { xo1, 31 }, { xo2,  274 }             }, { }, { rB, tlbl }, { },             "Translation Lookaside Buffer Invalidate Entry Local" },
   { "tlbsync", { { xo1, 31 }, { xo2,  566 }             }, { }, { }, { },                      "Translation Lookaside Buffer Synchronize" },
   { "tw",      { { xo1, 31 }, { xo2,    4 }             }, { }, { to, rA, rB }, { },           "Trap Word" },
   { "twi",     { { xo1,  3 }                            }, { }, { to, rA, simm }, { },         "Trap Word Immediate" },
   { "xor",     { { xo1, 31 }, { xo2,  316 }             }, { rA }, { rS, rB }, { rc },         "XOR" },
   { "xori",    { { xo1, 26 }                            }, { rA }, { rS, uimm }, { },          "XOR Immediate" },
   { "xoris",   { { xo1, 27 }                            }, { rA }, { rS, uimm }, { },          "XOR Immediate Shifted" },
};
